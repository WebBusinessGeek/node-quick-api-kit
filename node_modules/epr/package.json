{
  "name": "epr",
  "version": "1.0.0",
  "description": "A tool for making node require paths nicer",
  "keywords": [
    "require",
    "tool",
    "polunware"
  ],
  "author": {
    "name": "Max Polun",
    "email": "maxpolun@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/maxpolun/epr/issues"
  },
  "licence": "ISC",
  "main": "lib/epr.js",
  "bin": {
    "epr": "./main.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:maxpolun/epr.git"
  },
  "dependencies": {
    "bluebird": "^2.0.0",
    "lodash": "^2.4.1",
    "minimist": "^0.1.0"
  },
  "devDependencies": {
    "eslint-grunt": "^0.4.1",
    "grunt": "^0.4.2",
    "grunt-concurrent": "~0.4.3",
    "grunt-contrib-watch": "^0.5.3",
    "grunt-node-inspector": "^0.1.2",
    "jasmine2-pit": "^0.2.0",
    "minijasminenode2": "^1.0.0"
  },
  "scripts": {
    "test": "minijasminenode2 spec/*Spec.js"
  },
  "readme": "EPR ![travis status](https://travis-ci.org/maxpolun/epr.svg?branch=master)\n===\n\nepr lets you use nicer require paths in your node programs. It lets you change code like this:\n\n```js\nvar module1 = require('../../../modules/module1'),\n    module2 = require('./another/path/module2')\n```\n\nto\n\n```js\nvar module1 = require('module1'),\n    module2 = require('module2')\n```\n\n## How do you install it?\n\n```sh\nnpm install -g epr\n```\n\n## How do you use it?\n\nAdd an ```epr``` key to your ```package.json```:\n\n```json\n{\n  \"epr\": {\n    \"module1\": \"lib/modules/module1\"\n  }\n}\n```\n\nand run epr:\n\n```sh\nepr\n```\n\nepr will create symlinks in ```node_modules/``` for each attribute in your ```epr```\nobject. Normal node rules follow, so you can add a package.json file for each of\nyour directories to point to a main, or you can just use it as a shortcut:\n\n```js\nvar module1 = require('module1'),\n// or\n    module2 = require('module1/module2')\n```\n\nto set this up for deployments, call epr in your postinstall script\n\n## Any advice?\n\nThere are several ways you can use epr, you can link to individual modules, or\nyou can link to directories that contain several modules. In either case I'd\nrecommend linking to directories rather than specific files in either case. That\nmakes them easier to later split out to external packages if you want to.\n\nSo if you are linking to an individual module, at say ```lib/modules/mymodule```,\njust add ```\"mymodule\":\"lib/modules/mymodule\"```. This is best if you've got some\nsort of code that could be an external module, but you want to keep it internal\nfor whatever reason.\n\nIf you've got a directory that contains modules of a particular type, say a\n\"modals\" directory, you can link to that by adding ```\"modals\": \"lib/modals\"```,\nand can be required with something like ```require('modals/user')```\n\nLastly you could just link to ```lib/``` or wherever else you store most your code.\n\n## Does it do anything else?\n\nSure,\n\n* ```epr clean```: delete all symlinks that are not in package.json\n* ```epr empty```: delete *all* symlinks in node_modules\n\n## can I use it from javascript?\n\nSure,\n\n```js\nvar epr = require('epr')\nepr.entangle(process.cwd(), {module1: 'lib/module1'}) // create symlinks\nepr.clean(process.cwd(), {module1: 'lib/module1'}) // same as epr clean\nepr.empty(process.cwd()) // same as epr empty\n```\n\nAll epr api functions can either take a standard node callback or return a promise\n\n```js\nepr.entangle(process.cwd(), {module1: 'lib/module1'}, function(err){\n  if(err) {\n    console.error(err)\n  } else {\n    console.log('success!')\n  }\n})\n\nepr.entangle(process.cwd(), {module1: 'lib/module1'}.then(function(){\n  console.log('success!')\n}, function(err){\n  console.error(err)\n})\n```\n\n## I'd like to make a change\n\nSee [contributing](CONTRIBUTING.md)\n\n## What's with the name?\n\nEPR is a reference to the Einstein-Podolsky-Rosen thought experiment which was\nthe origin of the concept of entanglement in quantum mechanics, and the term\n\"spooky action at a distance\".\n\n## OS support\n\nepr will definitely run under any unix, but it has not been tested under windows.\nAny testing or PRs for windows support would be greatly appreciated. It has \nspecifically been tested to run in heroku.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/maxpolun/epr",
  "_id": "epr@1.0.0",
  "dist": {
    "shasum": "db2630f42f6abe13a0ad2518f4e654187920a73d"
  },
  "_from": "epr@",
  "_resolved": "https://registry.npmjs.org/epr/-/epr-1.0.0.tgz"
}
